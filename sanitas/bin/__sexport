# Copyright (c) 2009 Mario Carrion <mario@carrion.mx>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

S_CUSTOMPS1="\w-> "

# Helper environment variables
if test "x$S_CURRENT_FILE" = "x"; then
  S_CURRENT_FILE=`readlink -f $0`
  S_CURRENT_PATH=`dirname $S_CURRENT_FILE`
fi

# Helper functions
function srestore {
  if test "x$S_EXPORTED" = "x1"; then 
    export PS1=$S_PS1

    export DYLD_LIBRARY_PATH=$S_DYLD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$S_LD_LIBRARY_PATH
    export C_INCLUDE_PATH=$S_C_INCLUDE_PATH
    export ACLOCAL_PATH=$S_ACLOCAL_PATH
    export PKG_CONFIG_PATH=$S_PKG_CONFIG_PATH
    export MANPATH=$S_MANPATH
    export GTK_MODULE_DIR=$S_GTK_MODULE_DIR
    export libexecdir=$S_libexecdir
    export pythondir=$S_pythondir
    export PYTHONPATH=$S_PYTHONPATH
    export PATH=$S_PATH
  fi
}
function sdestroy {
  if test "x$S_EXPORTED" = "x1"; then 
    srestore 
    unset S_DYLD_LIBRARY_PATH
    unset S_LD_LIBRARY_PATH
    unset S_C_INCLUDE_PATH
    unset S_ACLOCAL_PATH
    unset S_PKG_CONFIG_PATH
    unset S_MANPATH
    unset S_GTK_MODULE_DIR
    unset S_libexecdir
    unset S_pythondir
    unset S_PYTHONPATH
    unset S_PATH
    unset S_EXPORTED
    unset S_NOTDETECTED
    unset PROMPT_COMMAND
  fi
}

# Doesn't make sense to change to current environment
if test "x$S_ENV" = "x$1"; then
  return
fi
S_ENV=$1
if test "x$S_ENV" = "x"; then
  S_ENV="trunk"
fi

if test "x$S_EXPORTED" = "x1"; then
  srestore
fi

export S_PS1=$PS1

# Flag to revert to S_VARIABLES when sexport is called again
export S_EXPORTED="1" 

# We save old variables to revert them when changing environments
export S_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH
export S_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export S_C_INCLUDE_PATH=$C_INCLUDE_PATH
export S_ACLOCAL_PATH=$ACLOCAL_PATH
export S_PKG_CONFIG_PATH=$PKG_CONFIG_PATH
export S_MANPATH=$MANPATH
export S_GTK_MODULE_DIR=$GTK_MODULE_DIR
export S_libexecdir=$libexecdir
export S_pythondir=$pythondir
export S_PYTHONPATH=$PYTHONPATH
#export S_GTK_MODULES=gail:atk-bridge # TODO: Use this?
export S_PATH=$PATH

# Function called before executing any command to update PS1
function s_prompt_command {
  # Was not detected and we are still using that folder?
  if test "x$S_NOTDETECTED" = "x1" && test "x$S_REPOPATH" = "x$PWD" ; then
    return
  # Are we under the same detected repository? 
  elif test "x$S_NOTDETECTED" = "x0" && test "x$S_REPOPATH" != "x" ; then
    length=${#S_REPOPATH}
    if test "x${PWD:0:$length}" = "x$S_REPOPATH"; then
      return
    fi
  fi

  arr=()
  index=0
  for item in `sdetect -p $PWD` ; do 
      if test "x${item}" = "xabort:" ; then
        break
      fi 
      arr[${index}]=${item}
    let "index=$index + 1"
  done

  if test "$index" = "4" ; then
    export S_NOTDETECTED=0
    export S_REPOPATH=${arr[3]}
    export PS1="@$S_ENV:${arr[1]} $S_CUSTOMPS1"
  else
    export S_REPOPATH=$PWD
    export S_NOTDETECTED=1
    export PS1="@$S_ENV $S_CUSTOMPS1"
  fi
}
PROMPT_COMMAND="s_prompt_command"


